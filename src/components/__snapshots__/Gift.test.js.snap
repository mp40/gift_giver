// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Gift renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Gift
    gift={
      Object {
        "id": 1,
      }
    }
    removeGift={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <ForwardRef(Bootstrap(Form))>
          <ForwardRef(Bootstrap(FormGroup))>
            <ForwardRef(ContextTransform)>
              Person
            </ForwardRef(ContextTransform)>
            <ForwardRef(ContextTransform)
              className="input-person"
              onChange={[Function]}
            />
          </ForwardRef(Bootstrap(FormGroup))>
          <ForwardRef(Bootstrap(FormGroup))>
            <ForwardRef(ContextTransform)>
              Present
            </ForwardRef(ContextTransform)>
            <ForwardRef(ContextTransform)
              className="input-present"
              onChange={[Function]}
            />
          </ForwardRef(Bootstrap(FormGroup))>
        </ForwardRef(Bootstrap(Form))>,
        <ForwardRef(Bootstrap(Button))
          className="btn-remove"
          onClick={[Function]}
        >
          Remove Gift
        </ForwardRef(Bootstrap(Button))>,
      ],
      "className": "gift",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef(Bootstrap(FormGroup))>
              <ForwardRef(ContextTransform)>
                Person
              </ForwardRef(ContextTransform)>
              <ForwardRef(ContextTransform)
                className="input-person"
                onChange={[Function]}
              />
            </ForwardRef(Bootstrap(FormGroup))>,
            <ForwardRef(Bootstrap(FormGroup))>
              <ForwardRef(ContextTransform)>
                Present
              </ForwardRef(ContextTransform)>
              <ForwardRef(ContextTransform)
                className="input-present"
                onChange={[Function]}
              />
            </ForwardRef(Bootstrap(FormGroup))>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef(ContextTransform)>
                  Person
                </ForwardRef(ContextTransform)>,
                <ForwardRef(ContextTransform)
                  className="input-person"
                  onChange={[Function]}
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": "Person",
                },
                "ref": null,
                "rendered": "Person",
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "defaultProps": undefined,
                  "propTypes": undefined,
                  "render": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "input-person",
                  "onChange": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "Feedback": [Function],
                  "defaultProps": undefined,
                  "propTypes": undefined,
                  "render": [Function],
                },
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef(ContextTransform)>
                  Present
                </ForwardRef(ContextTransform)>,
                <ForwardRef(ContextTransform)
                  className="input-present"
                  onChange={[Function]}
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": "Present",
                },
                "ref": null,
                "rendered": "Present",
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "defaultProps": undefined,
                  "propTypes": undefined,
                  "render": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "input-present",
                  "onChange": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "Feedback": [Function],
                  "defaultProps": undefined,
                  "propTypes": undefined,
                  "render": [Function],
                },
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "Check": Object {
            "$$typeof": Symbol(react.forward_ref),
            "Input": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
            "Label": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
            "defaultProps": undefined,
            "propTypes": undefined,
            "render": [Function],
          },
          "Control": Object {
            "$$typeof": Symbol(react.forward_ref),
            "Feedback": [Function],
            "defaultProps": undefined,
            "propTypes": undefined,
            "render": [Function],
          },
          "Group": Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": undefined,
            "propTypes": undefined,
            "render": [Function],
          },
          "Label": Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": undefined,
            "propTypes": undefined,
            "render": [Function],
          },
          "Row": Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": undefined,
            "propTypes": undefined,
            "render": [Function],
          },
          "Text": Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": undefined,
            "propTypes": undefined,
            "render": [Function],
          },
          "defaultProps": undefined,
          "propTypes": undefined,
          "render": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Remove Gift",
          "className": "btn-remove",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Remove Gift",
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "defaultProps": undefined,
          "propTypes": undefined,
          "render": [Function],
        },
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <ForwardRef(Bootstrap(Form))>
            <ForwardRef(Bootstrap(FormGroup))>
              <ForwardRef(ContextTransform)>
                Person
              </ForwardRef(ContextTransform)>
              <ForwardRef(ContextTransform)
                className="input-person"
                onChange={[Function]}
              />
            </ForwardRef(Bootstrap(FormGroup))>
            <ForwardRef(Bootstrap(FormGroup))>
              <ForwardRef(ContextTransform)>
                Present
              </ForwardRef(ContextTransform)>
              <ForwardRef(ContextTransform)
                className="input-present"
                onChange={[Function]}
              />
            </ForwardRef(Bootstrap(FormGroup))>
          </ForwardRef(Bootstrap(Form))>,
          <ForwardRef(Bootstrap(Button))
            className="btn-remove"
            onClick={[Function]}
          >
            Remove Gift
          </ForwardRef(Bootstrap(Button))>,
        ],
        "className": "gift",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef(Bootstrap(FormGroup))>
                <ForwardRef(ContextTransform)>
                  Person
                </ForwardRef(ContextTransform)>
                <ForwardRef(ContextTransform)
                  className="input-person"
                  onChange={[Function]}
                />
              </ForwardRef(Bootstrap(FormGroup))>,
              <ForwardRef(Bootstrap(FormGroup))>
                <ForwardRef(ContextTransform)>
                  Present
                </ForwardRef(ContextTransform)>
                <ForwardRef(ContextTransform)
                  className="input-present"
                  onChange={[Function]}
                />
              </ForwardRef(Bootstrap(FormGroup))>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef(ContextTransform)>
                    Person
                  </ForwardRef(ContextTransform)>,
                  <ForwardRef(ContextTransform)
                    className="input-person"
                    onChange={[Function]}
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Person",
                  },
                  "ref": null,
                  "rendered": "Person",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "defaultProps": undefined,
                    "propTypes": undefined,
                    "render": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "input-person",
                    "onChange": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "Feedback": [Function],
                    "defaultProps": undefined,
                    "propTypes": undefined,
                    "render": [Function],
                  },
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "defaultProps": undefined,
                "propTypes": undefined,
                "render": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef(ContextTransform)>
                    Present
                  </ForwardRef(ContextTransform)>,
                  <ForwardRef(ContextTransform)
                    className="input-present"
                    onChange={[Function]}
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Present",
                  },
                  "ref": null,
                  "rendered": "Present",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "defaultProps": undefined,
                    "propTypes": undefined,
                    "render": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "input-present",
                    "onChange": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "Feedback": [Function],
                    "defaultProps": undefined,
                    "propTypes": undefined,
                    "render": [Function],
                  },
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "defaultProps": undefined,
                "propTypes": undefined,
                "render": [Function],
              },
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "Check": Object {
              "$$typeof": Symbol(react.forward_ref),
              "Input": Object {
                "$$typeof": Symbol(react.forward_ref),
                "defaultProps": undefined,
                "propTypes": undefined,
                "render": [Function],
              },
              "Label": Object {
                "$$typeof": Symbol(react.forward_ref),
                "defaultProps": undefined,
                "propTypes": undefined,
                "render": [Function],
              },
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
            "Control": Object {
              "$$typeof": Symbol(react.forward_ref),
              "Feedback": [Function],
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
            "Group": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
            "Label": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
            "Row": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
            "Text": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
            "defaultProps": undefined,
            "propTypes": undefined,
            "render": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Remove Gift",
            "className": "btn-remove",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Remove Gift",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": undefined,
            "propTypes": undefined,
            "render": [Function],
          },
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
